/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TvsIndexRouteImport } from './routes/tvs/index'
import { Route as MoviesIndexRouteImport } from './routes/movies/index'
import { Route as TvsIdRouteImport } from './routes/tvs/$id'
import { Route as PersonIdRouteImport } from './routes/person.$id'
import { Route as MoviesIdRouteImport } from './routes/movies/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvsIndexRoute = TvsIndexRouteImport.update({
  id: '/tvs/',
  path: '/tvs/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIndexRoute = MoviesIndexRouteImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvsIdRoute = TvsIdRouteImport.update({
  id: '/tvs/$id',
  path: '/tvs/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonIdRoute = PersonIdRouteImport.update({
  id: '/person/$id',
  path: '/person/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIdRoute = MoviesIdRouteImport.update({
  id: '/movies/$id',
  path: '/movies/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/movies/$id': typeof MoviesIdRoute
  '/person/$id': typeof PersonIdRoute
  '/tvs/$id': typeof TvsIdRoute
  '/movies': typeof MoviesIndexRoute
  '/tvs': typeof TvsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/movies/$id': typeof MoviesIdRoute
  '/person/$id': typeof PersonIdRoute
  '/tvs/$id': typeof TvsIdRoute
  '/movies': typeof MoviesIndexRoute
  '/tvs': typeof TvsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/movies/$id': typeof MoviesIdRoute
  '/person/$id': typeof PersonIdRoute
  '/tvs/$id': typeof TvsIdRoute
  '/movies/': typeof MoviesIndexRoute
  '/tvs/': typeof TvsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/movies/$id'
    | '/person/$id'
    | '/tvs/$id'
    | '/movies'
    | '/tvs'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/movies/$id' | '/person/$id' | '/tvs/$id' | '/movies' | '/tvs'
  id:
    | '__root__'
    | '/'
    | '/movies/$id'
    | '/person/$id'
    | '/tvs/$id'
    | '/movies/'
    | '/tvs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MoviesIdRoute: typeof MoviesIdRoute
  PersonIdRoute: typeof PersonIdRoute
  TvsIdRoute: typeof TvsIdRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
  TvsIndexRoute: typeof TvsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tvs/': {
      id: '/tvs/'
      path: '/tvs'
      fullPath: '/tvs'
      preLoaderRoute: typeof TvsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tvs/$id': {
      id: '/tvs/$id'
      path: '/tvs/$id'
      fullPath: '/tvs/$id'
      preLoaderRoute: typeof TvsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/person/$id': {
      id: '/person/$id'
      path: '/person/$id'
      fullPath: '/person/$id'
      preLoaderRoute: typeof PersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$id': {
      id: '/movies/$id'
      path: '/movies/$id'
      fullPath: '/movies/$id'
      preLoaderRoute: typeof MoviesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MoviesIdRoute: MoviesIdRoute,
  PersonIdRoute: PersonIdRoute,
  TvsIdRoute: TvsIdRoute,
  MoviesIndexRoute: MoviesIndexRoute,
  TvsIndexRoute: TvsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
